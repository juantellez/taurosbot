// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ox.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
// = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OxRequest struct {
	Currency             string   `protobuf:"bytes,1,opt,name=Currency,proto3" json:"Currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OxRequest) Reset()         { *m = OxRequest{} }
func (m *OxRequest) String() string { return proto.CompactTextString(m) }
func (*OxRequest) ProtoMessage()    {}
func (*OxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_acb959be0ad598f2, []int{0}
}

func (m *OxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OxRequest.Unmarshal(m, b)
}
func (m *OxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OxRequest.Marshal(b, m, deterministic)
}
func (m *OxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OxRequest.Merge(m, src)
}
func (m *OxRequest) XXX_Size() int {
	return xxx_messageInfo_OxRequest.Size(m)
}
func (m *OxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OxRequest proto.InternalMessageInfo

func (m *OxRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type OxRate struct {
	Currency             string   `protobuf:"bytes,1,opt,name=Currency,proto3" json:"Currency,omitempty"`
	Rate                 string   `protobuf:"bytes,2,opt,name=Rate,proto3" json:"Rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OxRate) Reset()         { *m = OxRate{} }
func (m *OxRate) String() string { return proto.CompactTextString(m) }
func (*OxRate) ProtoMessage()    {}
func (*OxRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_acb959be0ad598f2, []int{1}
}

func (m *OxRate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OxRate.Unmarshal(m, b)
}
func (m *OxRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OxRate.Marshal(b, m, deterministic)
}
func (m *OxRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OxRate.Merge(m, src)
}
func (m *OxRate) XXX_Size() int {
	return xxx_messageInfo_OxRate.Size(m)
}
func (m *OxRate) XXX_DiscardUnknown() {
	xxx_messageInfo_OxRate.DiscardUnknown(m)
}

var xxx_messageInfo_OxRate proto.InternalMessageInfo

func (m *OxRate) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *OxRate) GetRate() string {
	if m != nil {
		return m.Rate
	}
	return ""
}

func init() {
	proto.RegisterType((*OxRequest)(nil), "pb.OxRequest")
	proto.RegisterType((*OxRate)(nil), "pb.OxRate")
}

func init() { proto.RegisterFile("ox.proto", fileDescriptor_acb959be0ad598f2) }

var fileDescriptor_acb959be0ad598f2 = []byte{
	// 137 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc8, 0xaf, 0xd0, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe7, 0xe2, 0xf4, 0xaf, 0x08, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe2, 0xe2, 0x70, 0x2e, 0x2d, 0x2a, 0x4a, 0xcd, 0x4b,
	0xae, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf3, 0x95, 0x2c, 0xb8, 0xd8, 0xfc, 0x2b,
	0x82, 0x12, 0x4b, 0x52, 0xf1, 0xa9, 0x12, 0x12, 0xe2, 0x62, 0x01, 0xa9, 0x91, 0x60, 0x02, 0x8b,
	0x83, 0xd9, 0x46, 0xa6, 0x20, 0x2b, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x34, 0xb8,
	0x38, 0xdd, 0x53, 0x4b, 0xa0, 0x26, 0xf1, 0xea, 0x15, 0x24, 0xe9, 0xc1, 0xad, 0x97, 0xe2, 0x82,
	0x72, 0x13, 0x4b, 0x52, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x8e, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x89, 0xb4, 0xa0, 0x4b, 0xb0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// = grpc.SupportPackageIsVersion4

// OxServiceClient is the client API for OxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OxServiceClient interface {
	GetOxRate(ctx context.Context, in *OxRequest, opts ...grpc.CallOption) (*OxRate, error)
}

type oxServiceClient struct {
	cc *grpc.ClientConn
}

func NewOxServiceClient(cc *grpc.ClientConn) OxServiceClient {
	return &oxServiceClient{cc}
}

func (c *oxServiceClient) GetOxRate(ctx context.Context, in *OxRequest, opts ...grpc.CallOption) (*OxRate, error) {
	out := new(OxRate)
	err := c.cc.Invoke(ctx, "/pb.OxService/GetOxRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OxServiceServer is the server API for OxService service.
type OxServiceServer interface {
	GetOxRate(context.Context, *OxRequest) (*OxRate, error)
}

// UnimplementedOxServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOxServiceServer struct {
}

func (*UnimplementedOxServiceServer) GetOxRate(ctx context.Context, req *OxRequest) (*OxRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOxRate not implemented")
}

func RegisterOxServiceServer(s *grpc.Server, srv OxServiceServer) {
	s.RegisterService(&_OxService_serviceDesc, srv)
}

func _OxService_GetOxRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OxServiceServer).GetOxRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OxService/GetOxRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OxServiceServer).GetOxRate(ctx, req.(*OxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OxService",
	HandlerType: (*OxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOxRate",
			Handler:    _OxService_GetOxRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ox.proto",
}
